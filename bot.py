import g4f
from telethon import TelegramClient, events
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import json
import requests
import datetime
import logging

API_ID = 
API_HASH = ''
TELEGRAM_SESSION = 'session_name'
BOT_TOKEN = ""
AUTHORIZED_USER_ID = 
BANNED_USERS_FILE = "banned_users.json"
CODES_FILE = "codes_storage.json"
BLOCKED_USERS_FILE = "blocked_users.json"
AUTOREPLY_STATE_FILE = "autoreply_state.json"

logging.basicConfig(level=logging.DEBUG)

if os.path.exists(f'{TELEGRAM_SESSION}.session'):
    os.remove(f'{TELEGRAM_SESSION}.session')
    logging.info("–°—Ç–∞—Ä–∞—è —Å–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
proxy = None  # –ü—Ä–∏–º–µ—Ä: ("socks5", "proxy_address", 1080, True, "username", "password")

client = TelegramClient(TELEGRAM_SESSION, API_ID, API_HASH, proxy=proxy)
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

ai_enabled = True
response_delay = 0
banned_users = set()
user_requests = {}
codes_storage = {}
autoreply_enabled = False
autoreply_text = "–≠—Ç–æ —Ç–µ–∫—Å—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞."
blocked_users = set()

def load_banned_users():
    try:
        with open(BANNED_USERS_FILE, "r") as file:
            return set(json.load(file))
    except FileNotFoundError:
        return set()

def save_banned_users():
    with open(BANNED_USERS_FILE, "w") as file:
        json.dump(list(banned_users), file)

def load_codes():
    if os.path.exists(CODES_FILE):
        with open(CODES_FILE, "r") as file:
            return json.load(file)
    return {}

def save_codes():
    with open(CODES_FILE, "w") as file:
        json.dump(codes_storage, file)

def load_blocked_users():
    try:
        with open(BLOCKED_USERS_FILE, "r") as file:
            return set(json.load(file))
    except FileNotFoundError:
        return set()

def save_blocked_users():
    with open(BLOCKED_USERS_FILE, "w") as file:
        json.dump(list(blocked_users), file)

def load_autoreply_state():
    try:
        with open(AUTOREPLY_STATE_FILE, "r") as file:
            state = json.load(file)
            return state.get("autoreply_enabled", False), state.get("autoreply_text", "–≠—Ç–æ —Ç–µ–∫—Å—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞.")
    except FileNotFoundError:
        return False, "–≠—Ç–æ —Ç–µ–∫—Å—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞."

def save_autoreply_state():
    with open(AUTOREPLY_STATE_FILE, "w") as file:
        json.dump({"autoreply_enabled": autoreply_enabled, "autoreply_text": autoreply_text}, file)

banned_users = load_banned_users()
codes_storage = load_codes()
blocked_users = load_blocked_users()
autoreply_enabled, autoreply_text = load_autoreply_state()

def is_user_banned(user_id: int) -> bool:
    return user_id in banned_users

async def generate_gpt_response(user_input: str) -> str:
    try:
        response = g4f.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": user_input}],
        )
        if isinstance(response, str):
            return response
        elif isinstance(response, dict) and 'choices' in response:
            return response['choices'][0]['message']['content']
        else:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GPT: {e}")
        return f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telethon
@client.on(events.NewMessage(incoming=True, func=lambda e: e.is_private))
async def handle_private_message(event):
    global ai_enabled, response_delay, autoreply_enabled, autoreply_text

    if event.sender_id in banned_users:
        await event.reply("‚õîÔ∏è –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return

    if not ai_enabled:
        return

    if event.sender_id in blocked_users:
        return

    if response_delay > 0:
        await asyncio.sleep(response_delay)

    if autoreply_enabled:
        await event.reply(autoreply_text)
        return

    user_input = event.message.message
    response = await generate_gpt_response(user_input)
    await event.reply(response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ aiogram
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if is_user_banned(message.from_user.id):
        await message.answer("‚õîÔ∏è –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return
    await message.answer("–π–æ—É, /about –¥–ª—è –∏–Ω—Ñ—ã/—Å–ø—Ä–∞–≤–∫–∏ –æ –±–æ—Ç–µ")

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/ai_on ‚Äî –≤–∫–ª—é—á–∏—Ç—å –ò–ò.\n"
        "/ai_off ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å –ò–ò.\n"
        "/set_delay <—Å–µ–∫—É–Ω–¥—ã> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º.\n"
        "/ban <user_id> ‚Äî –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
        "/unban <user_id> ‚Äî —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
        "/banned ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
        "/upload_code ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–¥.\n"
        "/get_code <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥.\n"
        "/code_list ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–¥–æ–≤.\n"
        "/delete_code <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–æ–¥.\n"
        "/log <user_id> ‚Äî –ª–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
        "/logs ‚Äî –ª–æ–≥–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
        "/autoreply_on ‚Äî –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫.\n"
        "/autoreply_off ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫.\n"
        "/set_autoreply <—Ç–µ–∫—Å—Ç> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞.\n"
        "/about ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ.\n"
        "/block_user <user_id> ‚Äî –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ò–ò –Ω–µ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å).\n"
        "/unblock_user <user_id> ‚Äî —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
    )
    await message.answer(help_text)

@dp.message(Command("ai_on"))
async def cmd_ai_on(message: types.Message):
    global ai_enabled
    if message.from_user.id != AUTHORIZED_USER_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    ai_enabled = True
    await message.answer("‚úÖ –ò–ò –≤–∫–ª—é—á–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

@dp.message(Command("ai_off"))
async def cmd_ai_off(message: types.Message):
    global ai_enabled
    if message.from_user.id != AUTHORIZED_USER_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    ai_enabled = False
    await message.answer("‚ùå –ò–ò –æ—Ç–∫–ª—é—á–µ–Ω –∏ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.")

@dp.message(Command("set_delay"))
async def cmd_set_delay(message: types.Message):
    global response_delay
    if message.from_user.id != AUTHORIZED_USER_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        delay = int(message.text.split(" ", 1)[1].strip())
        if delay >= 0:
            response_delay = delay
            await message.answer(f"‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {delay} —Å–µ–∫—É–Ω–¥.")
        else:
            await message.answer("‚ùå –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
    except (IndexError, ValueError):
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö. –ü—Ä–∏–º–µ—Ä: /set_delay 5")

@dp.message(Command("ban"))
async def cmd_ban(message: types.Message):
    if message.from_user.id != AUTHORIZED_USER_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        user_id = int(message.text.split(" ", 1)[1].strip())
        banned_users.add(user_id)
        save_banned_users()
        await message.answer(f"üî¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except (IndexError, ValueError):
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: /ban 123456789")

@dp.message(Command("unban"))
async def cmd_unban(message: types.Message):
    if message.from_user.id != AUTHORIZED_USER_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        user_id = int(message.text.split(" ", 1)[1].strip())
        banned_users.discard(user_id)
        save_banned_users()
        await message.answer(f"üü¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except (IndexError, ValueError):
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: /unban 123456789")

@dp.message(Command("banned"))
async def cmd_banned(message: types.Message):
    if message.from_user.id != AUTHORIZED_USER_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    if not banned_users:
        await message.answer("üö´ –ù–µ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    else:
        banned_list = "\n".join(str(user_id) for user_id in banned_users)
        await message.answer(f"üî¥ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{banned_list}")

@dp.message(Command("upload_code"))
async def cmd_upload_code(message: types.Message):
    if message.from_user.id != AUTHORIZED_USER_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        code_name, code_content = message.text.split("\n", 1)[1].split(":", 1)
        code_name = code_name.strip()
        code_content = code_content.strip()
        codes_storage[code_name] = code_content
        save_codes()
        await message.answer(f"‚úÖ –ö–æ–¥ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{code_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
    except ValueError:
        await message.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –∏ —Å–∞–º –∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ù–∞–∑–≤–∞–Ω–∏–µ: –ö–æ–¥'.")

@dp.message(Command("get_code"))
async def cmd_get_code(message: types.Message):
    if message.from_user.id != AUTHORIZED_USER_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        code_name = message.text.split(" ", 1)[1].strip()
        if code_name in codes_storage:
            code_content = codes_storage[code_name]
            await message.answer(f"–ö–æ–¥ '{code_name}':\n```python\n{code_content}\n```", parse_mode="Markdown")
        else:
            await message.answer(f"‚ùå –ö–æ–¥ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{code_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except IndexError:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–¥–∞. –ü—Ä–∏–º–µ—Ä: /get_code MyCode")

@dp.message(Command("code_list"))
async def cmd_code_list(message: types.Message):
    if message.from_user.id != AUTHORIZED_USER_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    if not codes_storage:
        await message.answer("üìù –°–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤ –ø—É—Å—Ç.")
    else:
        code_list = "üìù –°–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤:\n" + "\n".join(f"- {name}" for name in codes_storage.keys())
        await message.answer(code_list)

@dp.message(Command("delete_code"))
async def cmd_delete_code(message: types.Message):
    if message.from_user.id != AUTHORIZED_USER_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        code_name = message.text.split(" ", 1)[1].strip()
        if code_name in codes_storage:
            del codes_storage[code_name]
            save_codes()
            await message.answer(f"‚úÖ –ö–æ–¥ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{code_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
        else:
            await message.answer(f"‚ùå –ö–æ–¥ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{code_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except IndexError:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–¥–∞. –ü—Ä–∏–º–µ—Ä: /delete_code MyCode")

@dp.message(Command("log"))
async def cmd_log(message: types.Message):
    if message.from_user.id != AUTHORIZED_USER_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        user_id = int(message.text.split(" ", 1)[1].strip())
        if user_id in user_requests:
            logs = "\n".join(f"{log['time']}: {log['request']}" for log in user_requests[user_id])
            await message.answer(f"üìú –õ–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n{logs}")
        else:
            await message.answer(f"‚ùå –õ–æ–≥–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except (IndexError, ValueError):
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: /log 123456789")

@dp.message(Command("logs"))
async def cmd_logs(message: types.Message):
    if message.from_user.id != AUTHORIZED_USER_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    if not user_requests:
        await message.answer("üìú –õ–æ–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
    else:
        logs = []
        for user_id, requests in user_requests.items():
            logs.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}:\n" + "\n".join(f"{log['time']}: {log['request']}" for log in requests))
        await message.answer("üìú –õ–æ–≥–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n" + "\n\n".join(logs))

@dp.message(Command("autoreply_on"))
async def cmd_autoreply_on(message: types.Message):
    global autoreply_enabled
    if message.from_user.id != AUTHORIZED_USER_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    autoreply_enabled = True
    save_autoreply_state()
    await message.answer("‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –≤–∫–ª—é—á–µ–Ω.")

@dp.message(Command("autoreply_off"))
async def cmd_autoreply_off(message: types.Message):
    global autoreply_enabled
    if message.from_user.id != AUTHORIZED_USER_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    autoreply_enabled = False
    save_autoreply_state()
    await message.answer("‚ùå –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω.")

@dp.message(Command("set_autoreply"))
async def cmd_set_autoreply(message: types.Message):
    global autoreply_text
    if message.from_user.id != AUTHORIZED_USER_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        autoreply_text = message.text.split(" ", 1)[1].strip()
        save_autoreply_state()
        await message.answer(f"‚úÖ –¢–µ–∫—Å—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {autoreply_text}")
    except IndexError:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞. –ü—Ä–∏–º–µ—Ä: /set_autoreply –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç.")

@dp.message(Command("about"))
async def cmd_about(message: types.Message):
    about_text = (
        "–ü—Ä–∏–≤–µ—Ç, –Ø ‚Äî –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ"
    )
    await message.answer(about_text)

@dp.message(Command("block_user"))
async def cmd_block_user(message: types.Message):
    if message.from_user.id != AUTHORIZED_USER_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        user_id = int(message.text.split(" ", 1)[1].strip())
        blocked_users.add(user_id)
        save_blocked_users()
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö.")
    except (IndexError, ValueError):
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: /block_user 123456789")

@dp.message(Command("unblock_user"))
async def cmd_unblock_user(message: types.Message):
    if message.from_user.id != AUTHORIZED_USER_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        user_id = int(message.text.split(" ", 1)[1].strip())
        if user_id in blocked_users:
            blocked_users.discard(user_id)
            save_blocked_users()
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö.")
        else:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö.")
    except (IndexError, ValueError):
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: /unblock_user 123456789")

async def start_telethon():
    await client.start()
    logging.info("Telethon –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await client.run_until_disconnected()

async def start_bot():
    await dp.start_polling(bot)

async def main():
    await asyncio.gather(
        start_telethon(),
        start_bot()
    )

if __name__ == '__main__':
    asyncio.run(main())